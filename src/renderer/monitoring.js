// Monitoring page JavaScript
document.addEventListener('DOMContentLoaded', () => {
  // DOM Elements
  const keywordsList = document.getElementById('keywordsList');
  const excludedTermsContainer = document.getElementById('excludedTermsContainer');
  const excludedTermsList = document.getElementById('excludedTermsList');
  const totalPosts = document.getElementById('totalPosts');
  const posts5min = document.getElementById('posts5min');
  const posts15min = document.getElementById('posts15min');
  const posts30min = document.getElementById('posts30min');
  const posts60min = document.getElementById('posts60min');
  const filteredPosts = document.getElementById('filteredPosts');
  const trend5min = document.getElementById('trend5min');
  const trend15min = document.getElementById('trend15min');
  const trend30min = document.getElementById('trend30min');
  const trend60min = document.getElementById('trend60min');
  const stopAnalysisBtn = document.getElementById('stopAnalysisBtn');
  const accountInfo = document.getElementById('accountInfo');
  const accountLink = document.getElementById('accountLink');
  const tweetsList = document.getElementById('tweetsList');
  
  // Stats tracking
  let stats = {
    totalPosts: 0,
    filteredPosts: 0,
    posts: [], // Array to store post timestamps
    previousStats: {
      '5min': 0,
      '15min': 0,
      '30min': 0,
      '60min': 0
    },
    processedTweetIds: new Set(), // Track unique tweet IDs
    processedContentHashes: new Set(), // Track unique content hashes
    excludedTerms: [] // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  };
  
  // Load user information for the account display
  async function loadTwitterUserInfo() {
    try {
      const userInfo = await window.api.getTwitterUserInfo();
      
      if (userInfo && userInfo.username) {
        // Update account link in the header
        accountLink.textContent = userInfo.username;
        
        // Set Twitter profile URL
        const twitterHandle = userInfo.username.startsWith('@') ? 
          userInfo.username.substring(1) : userInfo.username;
        
        // Only set the link if we have a valid username (not the default @user)
        if (twitterHandle !== 'user') {
          accountLink.href = `https://twitter.com/${twitterHandle}`;
        } else {
          accountLink.href = '#';
        }
      }
    } catch (error) {
      console.error('Error loading Twitter user info:', error);
    }
  }
  
  // Load user info on page load
  loadTwitterUserInfo();
  
  // Initialize monitoring stats display
  window.api.onSearchInfo(info => {
    // Display keywords
    keywordsList.innerHTML = ''; // Clear existing keywords
    info.keywords.forEach(keyword => {
      const tag = document.createElement('span');
      tag.className = 'keyword-tag';
      tag.textContent = keyword;
      keywordsList.appendChild(tag);
    });
    
    // Display excluded terms if any
    if (info.excludedTerms && info.excludedTerms.length > 0) {
      excludedTermsContainer.style.display = 'block';
      excludedTermsList.innerHTML = ''; // Clear existing excluded terms
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      stats.excludedTerms = [...info.excludedTerms];
      
      info.excludedTerms.forEach(term => {
        const tag = document.createElement('span');
        tag.className = 'keyword-tag';
        tag.textContent = term;
        excludedTermsList.appendChild(tag);
      });
    }
  });
  
  // Receive post data from main process (coming from Puppeteer)
  window.api.onPostData(postData => {
    console.log('MONITORING UI: Received post data:', postData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (!postData || !postData.id) {
      console.error('MONITORING UI: Received invalid post data:', postData);
      return;
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–≤–∏—Ç–∞ - —Å–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞ ID, –∞ –Ω–µ –Ω–∞ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–≤–∏—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ
      if (stats.processedTweetIds.has(postData.id)) {
        console.log(`MONITORING UI: –î—É–±–ª–∏–∫–∞—Ç —Ç–≤–∏—Ç–∞ —Å ID ${postData.id} –ø—Ä–æ–ø—É—â–µ–Ω`);
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ç–≤–∏—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
      // –≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–≤–∏—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ ID, –Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
      if (postData.text && postData.text.length > 20) {
        // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ –ø–µ—Ä–≤—ã—Ö 20 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∞
        const textAndAuthorHash = `${postData.author}_${postData.text.substring(0, 20)}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫—ç—à–µ
        if (stats.processedContentHashes.has(textAndAuthorHash)) {
          console.log(`MONITORING UI: –¢–≤–∏—Ç —Å –ø–æ—Ö–æ–∂–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø—Ä–æ–ø—É—â–µ–Ω: ${textAndAuthorHash}`);
          return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        stats.processedContentHashes.add(textAndAuthorHash);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–≤–∏—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      stats.processedTweetIds.add(postData.id);
      
      console.log(`MONITORING UI: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–≤–∏—Ç–∞: ${postData.id}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Ç–≤–∏—Ç–∞
      showNewTweetIndicator();
      
      // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const timestamp = Date.now();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–≤–∏—Ç–µ
      showTweetNotification(postData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–≤–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ç–≤–∏—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      addTweetToList(postData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–≤–∏—Ç –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω
      const excluded = isPostExcluded(postData.text);
      
      if (excluded) {
        stats.filteredPosts++;
        filteredPosts.textContent = stats.filteredPosts;
        console.log(`MONITORING UI: –¢–≤–∏—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: ${postData.id}`);
      } else {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        stats.totalPosts++;
        totalPosts.textContent = stats.totalPosts;
        console.log(`MONITORING UI: –¢–≤–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${postData.id}, –≤—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤: ${stats.totalPosts}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–≤–∏—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        stats.posts.push(timestamp);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      updateStatistics();
    } catch (error) {
      console.error('MONITORING UI: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–∞:', error);
    }
  });
  
  // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–≤–∏—Ç–∞
  function showNewTweetIndicator() {
    try {
      // –î–æ–±–∞–≤–∏—Ç—å –º–∏–≥–∞—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const indicator = document.createElement('div');
      
      // –ó–∞–¥–∞–µ–º —Å—Ç–∏–ª–∏
      Object.assign(indicator.style, {
        position: 'fixed',
        top: '10px',
        right: '10px',
        backgroundColor: '#1da1f2', // Twitter —Å–∏–Ω–∏–π
        color: 'white',
        padding: '6px 12px',
        borderRadius: '20px',
        zIndex: '9999',
        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.3)',
        animation: 'pulse 1s infinite alternate'
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      const style = document.createElement('style');
      style.textContent = `
        @keyframes pulse {
          0% { opacity: 0.7; transform: scale(1); }
          100% { opacity: 1; transform: scale(1.1); }
        }
      `;
      document.head.appendChild(style);
      
      // –¢–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
      indicator.textContent = 'üîî –ù–æ–≤—ã–π —Ç–≤–∏—Ç –ø–æ–ª—É—á–µ–Ω!';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
      document.body.appendChild(indicator);
      
      // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        indicator.style.transition = 'opacity 0.5s, transform 0.5s';
        indicator.style.opacity = '0';
        indicator.style.transform = 'translateY(-20px)';
        
        setTimeout(() => {
          if (indicator.parentNode) {
            indicator.parentNode.removeChild(indicator);
          }
          if (style.parentNode) {
            style.parentNode.removeChild(style);
          }
        }, 500);
      }, 3000);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:', err);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–≤–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ç–≤–∏—Ç–æ–≤
  function addTweetToList(postData) {
    if (!postData || !postData.text) {
      console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–≤–∏—Ç–∞:", postData);
      return;
    }
    
    console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–≤–∏—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫:", postData.text.substring(0, 30) + "...");
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–≤–∏—Ç–∞
    const tweetElement = document.createElement('div');
    tweetElement.className = 'tweet-item';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const tweetDate = postData.timestamp ? new Date(postData.timestamp) : new Date();
    const formattedDate = tweetDate.toLocaleString();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ —Ç–≤–∏—Ç–∞
    const author = postData.author || 'Unknown Author';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ —Ç–≤–∏—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    const excluded = isPostExcluded(postData.text);
    if (excluded) {
      tweetElement.classList.add('excluded-tweet');
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–≤–∏—Ç–∞
    tweetElement.innerHTML = `
      <div class="card-header ${excluded ? 'bg-secondary' : 'bg-info'}" style="background-color: ${excluded ? '#6c757d' : '#17a2b8'}; color: white;">
        <span style="font-weight: bold;">${author}</span>
        <small>${formattedDate}</small>
      </div>
      <div class="card-body">
        <p class="tweet-text">${postData.text}</p>
      </div>
    `;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä tweetsList
    if (!tweetsList) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä tweetsList –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–≤–∏—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    if (tweetsList.firstChild) {
      tweetsList.insertBefore(tweetElement, tweetsList.firstChild);
    } else {
      tweetsList.appendChild(tweetElement);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const MAX_DISPLAYED_TWEETS = 100;
    while (tweetsList.children.length > MAX_DISPLAYED_TWEETS) {
      tweetsList.removeChild(tweetsList.lastChild);
    }
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–≤–∏—Ç–µ
  function showTweetNotification(postData) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = 'tweet-notification';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (postData.author) {
      const author = document.createElement('strong');
      author.textContent = postData.author;
      author.style.display = 'block';
      author.style.marginBottom = '5px';
      notification.appendChild(author);
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    const text = postData.text.length > 100 ? 
      postData.text.substring(0, 100) + '...' : 
      postData.text;
    
    const content = document.createElement('p');
    content.style.margin = '0';
    content.style.fontSize = '14px';
    content.textContent = text;
    notification.appendChild(content);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.style.opacity = '1';
    }, 10);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => notification.remove(), 300);
    }, 5000);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ—Å—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  function isPostExcluded(postText) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤–º–µ—Å—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Ö –∏–∑ DOM
    const excludedTerms = stats.excludedTerms;
    
    if (!excludedTerms || !excludedTerms.length || !postText) return false;
    
    return excludedTerms.some(term => 
      postText.toLowerCase().includes(term.toLowerCase())
    );
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  function updateStatistics() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    totalPosts.textContent = stats.totalPosts;
    
    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const now = Date.now();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const lastStats = { ...stats.previousStats };
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const posts5MinCount = countPostsInRange(now - 5 * 60 * 1000, now);
    const posts15MinCount = countPostsInRange(now - 15 * 60 * 1000, now);
    const posts30MinCount = countPostsInRange(now - 30 * 60 * 1000, now);
    const posts60MinCount = countPostsInRange(now - 60 * 60 * 1000, now);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    posts5min.textContent = posts5MinCount;
    posts15min.textContent = posts15MinCount;
    posts30min.textContent = posts30MinCount;
    posts60min.textContent = posts60MinCount;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç—Ä–µ–Ω–¥–∞
    updateTrendIndicator(trend5min, posts5MinCount, lastStats['5min']);
    updateTrendIndicator(trend15min, posts15MinCount, lastStats['15min']);
    updateTrendIndicator(trend30min, posts30MinCount, lastStats['30min']);
    updateTrendIndicator(trend60min, posts60MinCount, lastStats['60min']);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    stats.previousStats = {
      '5min': posts5MinCount,
      '15min': posts15MinCount,
      '30min': posts30MinCount,
      '60min': posts60MinCount
    };
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    cleanupOldPosts(now - 60 * 60 * 1000);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞
  function updateTrendIndicator(element, currentValue, previousValue) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
    element.classList.remove('trend-up', 'trend-down', 'trend-neutral');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if (element.parentNode) {
      element.parentNode.style.color = '';
    }
    
    if (currentValue > previousValue) {
      // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
      element.textContent = '‚Üë';
      element.className = 'trend-indicator trend-up';
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
      if (element.parentNode) {
        element.parentNode.style.color = 'var(--success)';
      }
    } else if (currentValue < previousValue) {
      // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ - –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
      element.textContent = '‚Üì';
      element.className = 'trend-indicator trend-down';
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
      if (element.parentNode) {
        element.parentNode.style.color = 'var(--danger)';
      }
    } else {
      // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
      element.textContent = '‚Äî';
      element.className = 'trend-indicator trend-neutral';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const percentChange = previousValue === 0 
      ? (currentValue > 0 ? '+‚àû%' : '0%')
      : Math.round((currentValue - previousValue) / previousValue * 100) + '%';
    
    const tooltip = currentValue > previousValue 
      ? `–ù–∞ ${Math.abs(currentValue - previousValue)} –±–æ–ª—å—à–µ (${percentChange})`
      : currentValue < previousValue 
        ? `–ù–∞ ${Math.abs(currentValue - previousValue)} –º–µ–Ω—å—à–µ (${percentChange})`
        : '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π';
    
    element.title = tooltip;
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  function countPostsInRange(startTime, endTime) {
    return stats.posts.filter(timestamp => 
      timestamp >= startTime && timestamp <= endTime
    ).length;
  }
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
  function cleanupOldPosts(cutoffTime) {
    stats.posts = stats.posts.filter(timestamp => timestamp >= cutoffTime);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  setInterval(updateStatistics, 5000);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
  stopAnalysisBtn.addEventListener('click', async () => {
    try {
      const result = await window.api.stopAnalysis();
      if (result.success) {
        // –û–∫–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
      } else {
        alert(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: ${result.error}`);
      }
    } catch (error) {
      alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
});